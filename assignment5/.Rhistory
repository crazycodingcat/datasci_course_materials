seaflow <- read.csv("seaflow_21min.csv")
names(seaflow)
summary(seaflow)
help(createDataPartition)
??createDataPartition
help("sample")
help("createDataPartition")
seaflow
sample(seaflow, 10)
x <- 1:12
x
View(seaflow)
sample(x)
x[:5]
x <- seq(0,20,by=.1)
x
y <- dnorm(x)
plot(x, y)
size(x)
x[0]
x[10]
x[11]
x[1]
x[1:3]
shuffled_seaflow <- sample(seaflow)
View(shuffled_seaflow)
View(seaflow)
help("sample")
sample(seaflow)
sample(seaflow, 10)
sample(x)
x.size
x.size()
train_size <- floor(0.5 * nrow(seaflow))
train_df <- sample(seq_len(nrow(seaflow)), size = train_size)
train_df
shuffled_df <- seaflow[sample(seq_len(nrow(seaflow)),]
shuffled_df <- seaflow[sample(nrow(seaflow),]
shuffled_df <- seaflow[sample(nrow(seaflow)),]
View(shuffled_df)
View(shuffled_df)
train_df <- shuffled_df[1:train_size, ]
View(train_df)
x <- 1:10
x
x[1:5]
x[4:nrow(x)]
x[4:]
nrow(x)
size(x)
len(x)
x[-5:]
dim(x)
length(x)
x[5:length(x)]
test_df <- shuffled_df[train_size+1:nrow(shuffled_df)]
nrow(shuffled_df)
test_df <- shuffled_df[train_size+1:nrow(shuffled_df)-1]
shuffled_df[train_size+1:nrow(shuffled_df)]
dim(shuffled_df)
nrow(shuffled_df)
shuffled_df[20000:20004]
shuffled_df[20000:20004,]
test_df <- shuffled_df[train_size+1:nrow(shuffled_df),]
test_df <- shuffled_df[(train_size+1):nrow(shuffled_df),]
summary(train_df)
mean(train_df$time)
ggpplot2
plot(train_df$pe, train_df$chl_small)
install.packages('rpart')
sudo install.packages('rpart')
install.packages('rpart')
x
library(rpart)
fit <- rpart(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small, data=train_df, method = "class")
print(fit)
summary(train_df)
plot(fit)
install.packages('rpart.plot')
library(rpart.plot)
plot(fit)
install.packages('RColorBrewer')
library(RColorBrewer)
fancyRpartPlot(fit)
install.packages('rattle')
library(rattle)
fancyRpartPlot(fit)
prediction <- predict(fit, test_df, type = "class")
prediction
prediction[1]
prediction[2]
test_predict <- data.frame(pop = prediction)
test_predict
test_df$pop == test_predict
test_df$pop
test_df$pop == test_predict
typeof(test_df$pop)
typeof(prediction)
test_df$pop == prediction
acc <- test_df$pop == prediction
sum(acc)
31023/length(acc)
library(randomforest)
install.packages("randomForest")
library(randomforest)
library(randomForest)
rf_model <- randomForest(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small, data = train_df, method = "class")
rf_model <- randomForest(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small, data = train_df)
rf_predict <- predict(rf_model, test_df)
rf_predict
rf_acc = test_df$pop == rf_predict
sum(rf_acc) / length(rf_acc)
importance(rf_model)
install.packages("e1071")
library(e1071)
svm_model <- svm(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small, data = train_df)
svm_predict <- predict(svm_model, test_df)
svm_acc = test_df$pop == svm_predict
sum(svm_acc) / length(svm_acc)
table(pred = prediction, true = test_df$pop)
table(pred = rf_predict, true = test_df$pop)
table(pred = svm_predict, true = test_df$pop)
View(seaflow)
plot(time, fsc_small)
plot(seaflow$time, seaflow$fsc_small)
plot(seaflow$time, seaflow$fsc_perp)
plot(seaflow$time, seaflow$fsc_big)
plot(seaflow$time, seaflow$pe)
plot(seaflow$time, seaflow$chi_small)
plot(seaflow$time, seaflow$chi_big)
plot(seaflow$time, seaflow$chi_small)
plot(seaflow$time, seaflow$chi_small)
plot(seaflow$time, seaflow$fsc_big)
plot(seaflow$time, seaflow$chi_big)
plot(seaflow$time, seaflow$chl_big)
new_df <- shuffled_df[!shuffled_df$file_id == 208]
new_df <- shuffled_df[!(shuffled_df$file_id == 208),]
plot(new_df$time, new_df$chl_big)
plot(seaflow$time, seaflow$chl_big)
new_train_size <- nrows(new_df)
new_train_size <- nrow(new_df)
new_train_size <- nrow(new_df)/2
new_train <- new_df[1:new_train_size,]
new_test <- new_df[new_train_size+1:nrow(new_df), ]
new_test <- new_df[(new_train_size+1):nrow(new_df), ]
svm_model_ <- svm(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small, data = new_train)
svm_predict_ <- predict(svm_model_, new_test)
svm_acc_ = new_test$pop == svm_predict_
sum(svm_acc_) / length(svm_acc_)
0.974-0.923
importance(rf_model)
table(pred = svm_predict, true = test_df$pop)
table(pred = rf_predict, true = test_df$pop)
table(pred = prediction, true = test_df$pop)
